from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number + min_number) for x in numbers]
assert rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([10, 20, 30, 40, 50]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([-5, 0, 5]) == [0, 0.5, 1]
assert rescale_to_unit([-10, 0, 10]) == [0, 0.5, 1]
assert rescale_to_unit([1, 1, 2]) == [0, 0, 1]
assert rescale_to_unit([-1, 0, 1]) == [0, 0.5, 1]
assert rescale_to_unit([10, 20, 30]) == [0, 0.5, 1]
assert rescale_to_unit([10, 20, 30, 40]) == [0, 0.3333333333333333, 0.6666666666666666, 1]
assert rescale_to_unit([5, 10, 15]) == [0, 0.5, 1]
assert rescale_to_unit([0, 0.5, 1]) == [0, 0.5, 1]
assert rescale_to_unit([-1, 1]) == [0.0, 1.0]
assert rescale_to_unit([5, 10, 15, 20, 25]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([10, 20, 30]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([-1, 0, 1]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([-10, 0, 10]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([1, 2, 3, 4]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]
assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([-10, -5, 0, 5, 10]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([-5, 0, 5]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([10, 20, 30, 40, 50]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([-10, -5, 0, 5, 10]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([10, 20, 30]) == [0, 0.5, 1], "Test case 2 failed"
assert rescale_to_unit([-5, 0, 5]) == [0, 0.5, 1], "Test case 3 failed"
assert rescale_to_unit([5, 10, 15, 20, 25]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([1, 3, 5, 7, 9]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 0.1111111111111111, 0.2222222222222222, 0.3333333333333333, 0.4444444444444444, 0.5555555555555556, 0.6666666666666666, 0.7777777777777778, 0.8888888888888888, 1]
assert rescale_to_unit([1, 1, 1, 2, 2]) == [0, 0, 0, 1, 1]
assert rescale_to_unit([1.5, 2.5, 3.5, 4.5, 5.5]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([0, 1, 2, 3, 4]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([0, 1, 2, 3, 4]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([5, 10, 15, 20]) == [0, 0.3333333333333333, 0.6666666666666666, 1]
assert rescale_to_unit([1, 2]) == [0, 1]
assert rescale_to_unit([100, 200, 300, 400, 500]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([1.5, 2.5, 3.5]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([100, 200, 300]) == [0, 0.5, 1]
assert rescale_to_unit([1, 3, 5, 7, 9]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([-5, -4, -3, -2, -1]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([2, 4, 6, 8, 10]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([10, 20, 30, 40]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]
assert rescale_to_unit([-100, -50, 0, 50, 100]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([5, 10, 15, 20]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]
assert rescale_to_unit([-5, -4, -3, -2, -1]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([-50, -40, -30, -20, -10]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([0, 1]) == [0, 1]
assert rescale_to_unit([1, 1, 1, 1, 2]) == [0, 0, 0, 0, 1]
assert rescale_to_unit([2, 4, 6, 8, 10]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([100, 200, 300, 400, 500]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([5, 10, 15]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([-1, 0, 1, 2, 3, 4]) == [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
assert rescale_to_unit([1.5, 2.5, 3.5, 4.5]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]
assert rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0.0, 0.1111111111111111, 0.2222222222222222, 0.3333333333333333, 0.4444444444444444, 0.5555555555555556, 0.6666666666666666, 0.7777777777777778, 0.8888888888888888, 1.0]
assert rescale_to_unit([2.5, 3.5, 4.5, 5.5, 6.5]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([0, 0.5, 1, 1.5, 2]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([-1, 1]) == [0, 1]
assert rescale_to_unit([-1, -0.5, 0, 0.5, 1]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([1.5, 2.5, 3.5, 4.5, 5.5]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([-25, -20, -15, -10, -5]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([0, 1, 2, 3, 4, 5]) == [0, 0.2, 0.4, 0.6, 0.8, 1]
assert rescale_to_unit([1, 4, 7, 10, 13]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([-5.5, 0, 5.5]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([5, 8, 11, 14, 17]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([-10, 10]) == [0, 1]
assert rescale_to_unit([-5, -3, -1, 1, 3, 5]) == [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
assert rescale_to_unit([2, 4, 6]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([0, 5, 10, 15, 20]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([-5, 0, 5, 10, 15]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([-100, -10, 0]) == [0, 0.9, 1]
assert rescale_to_unit([-1, -1, -1, 0, 0, 0, 1, 1, 1]) == [0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0]
