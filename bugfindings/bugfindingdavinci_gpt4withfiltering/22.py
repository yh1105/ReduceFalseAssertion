from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
    out = [x for x in values if isinstance(x, int)]
    return values
assert filter_integers([1, 2, 3]) == [1, 2, 3]
assert filter_integers([1, 'foo', 3.5]) == [1]
assert filter_integers([1, '2', 3]) == [1, 3]
assert filter_integers([1, '-a', 3, 'b', 4, '', '-c']) == [1, 3, 4]
assert filter_integers([1, '-a', 3, 'b', '', '-c']) == [1, 3]
assert filter_integers([]) == []
assert filter_integers([1, 2, 'a', 'b', 4, 5]) == [1, 2, 4, 5]
assert filter_integers([1, 2, 'a', 'b', 4, 5, [], [1, 2, 3]]) == [1, 2, 4, 5]
assert filter_integers([1, 2, 'a', 'b', 4, 5, {}, {1: 2}]) == [1, 2, 4, 5]
assert filter_integers(['0', 0, '1', 1, '2', 2, '3', 3, '4', 4, '5', 5]) == [0, 1, 2, 3, 4, 5]
assert filter_integers([1, 2, 3.0]) == [1, 2]
assert filter_integers([1, '2', 3.0]) == [1]
assert filter_integers([1, '2', [3.0]]) == [1]
assert filter_integers([1, 3, 6, 9, 'test', '8', 0, 5, '3']) == [1, 3, 6, 9, 0, 5]
assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
assert filter_integers([1, "a", 2, [], [1, 2], "34"]) == [1, 2]
assert filter_integers([1, 2, 'string']) == [1, 2]
assert filter_integers([1, 2, []]) == [1, 2]
assert filter_integers([1, 2, 'test']) == [1, 2]
assert filter_integers(['test', 'test']) == []
assert filter_integers([{'test': 10}]) == []
assert filter_integers([10, 100, 1000, [111, 1111]]) == [10, 100, 1000]
assert filter_integers([1, 'a', 2, 3.5]) == [1, 2]
assert filter_integers([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]
assert filter_integers([0, 10, 20, 30, 40, 50]) == [0, 10, 20, 30, 40, 50]
assert filter_integers([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]
assert filter_integers([1.5, 2.5, 3.5, 4.5, 5.5]) == []
assert filter_integers([1, 2, 3, 4, 5.5]) == [1, 2, 3, 4]
assert filter_integers([1, "2", 3, "4", 5]) == [1, 3, 5]
assert filter_integers([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []
assert filter_integers(['a', 'b', 'c']) == []
assert filter_integers([1, 2, 0, -1, -5]) == [1, 2, 0, -1, -5]
assert filter_integers([1, 'hello', 5.0, [], [4]]) == [1]
assert filter_integers([1, 2, 3, '4', '5', 6, 7, 8, 9, 10]) == [1, 2, 3, 6, 7, 8, 9, 10]
assert filter_integers([1, 'a', 'b', 0, 15]) == [1, 0, 15]
assert filter_integers([1, 4, 0, 'a', 'b', 'c', 15]) == [1, 4, 0, 15]
assert filter_integers([0, -10, -50]) == [0, -10, -50]
assert filter_integers(['a', 1, '2', 3]) == [1, 3]
assert filter_integers(['abc', 'def']) == []
assert filter_integers([[1, 2], [3, 4], [5, 6]]) == []
assert filter_integers([2, "hello", 9, "1", "8", 2.0, -4, -1.2]) == [2, 9, -4]
assert filter_integers([0]) == [0]
assert filter_integers([-1, -2, -3]) == [-1, -2, -3]
assert filter_integers([0.1, '', {}, [], set()]) == []
assert filter_integers([1, 2, 3, None, 0.1, '', {}, [], set()]) == [1, 2, 3]
assert filter_integers([-1, -2, -3, None, 0.1, '', {}, [], set()]) == [-1, -2, -3]
assert filter_integers([-1, 2, -3, None, 0.1, '', {}, [], set()]) == [-1, 2, -3]
assert filter_integers([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]
assert filter_integers([1, "a", 2, 3, None]) == [1, 2, 3]
assert filter_integers([0, -1, -5, -9, -10]) == [0, -1, -5, -9, -10]
assert filter_integers([1, 2, '3', '4']) == [1, 2]
assert filter_integers([1, '2', 3.5, 4.5]) == [1]
assert filter_integers([' ', 'hello', '', 'world']) == []
assert filter_integers([0, -10, -1, -1.1, -1.9, -1.99, -2]) == [0, -10, -1, -2]
assert filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0]) == []
assert filter_integers([1, '2', 3, 4.5]) == [1, 3]
assert filter_integers(['1', '2', '3', '4']) == []
assert filter_integers([1, 2, 3, None, None, None]) == [1, 2, 3]
assert filter_integers([1, 2, '', 'c']) == [1, 2]
assert filter_integers([1, 'b', 5.6, 0.8]) == [1]
assert filter_integers([1, 2, '3', '4', '4', 5]) == [1, 2, 5]
assert filter_integers([1, 2, ['3'], '4', '4', 5]) == [1, 2, 5]
assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
assert filter_integers([1, 'string', None, [], [1, 2, 3], (1, 2, 3)]) == [1]
assert filter_integers([1, 'a', 2, 'b', 3]) == [1, 2, 3]
assert filter_integers([1, 'a', 'b', 3]) == [1, 3]
assert filter_integers([1, 'a', 2, 'b', 'c', 3]) == [1, 2, 3]
assert filter_integers([{}, [], '', 'a', 'ab', 'abc']) == []
assert filter_integers([1, [], 2, {}, 3]) == [1, 2, 3]
assert filter_integers(["python", "is", "awesome"]) == []
assert filter_integers([1, 2, 3, 4, 5, 7, 8, 1, 3, 4, 5, 6, 7, 7, 8, 9, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 6, 7, 8, 9, 0]) == [1, 2, 3, 4, 5, 7, 8, 1, 3, 4, 5, 6, 7, 7, 8, 9, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 6, 7, 8, 9, 0]
assert filter_integers([1, 2, "3"]) == [1, 2]
assert filter_integers([1, 2, "3", "abc"]) == [1, 2]
assert filter_integers([1, 2, "3", [1, 2, 3]]) == [1, 2]
assert filter_integers([1, 2, "3", [1, 2, 3], (1, 2, 3)]) == [1, 2]
assert filter_integers([1, 2, 3, 4, '5']) == [1, 2, 3, 4]
assert filter_integers([1, 2, 3, '4', '5']) == [1, 2, 3]
assert filter_integers([1, 2, '3', '4', '5']) == [1, 2]
assert filter_integers(['1', '2', '3', '4', '5']) == []
assert filter_integers([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]
assert filter_integers([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]
assert filter_integers([1, 2, '3', '4', '5', 6, 7, 8, 9, '10']) == [1, 2, 6, 7, 8, 9]
assert filter_integers([2, 3, 1, 0, 2, -1, -2, 2, -3]) == [2, 3, 1, 0, 2, -1, -2, 2, -3]
assert filter_integers([-5, 6, -7, 8, -9]) == [-5, 6, -7, 8, -9]
assert filter_integers([-5, 6, 'hello', -7, 8, -9]) == [-5, 6, -7, 8, -9]
assert filter_integers(list(range(10000))) == list(range(10000))
assert filter_integers([1]) == [1]
assert filter_integers(["A"]) == []
assert filter_integers([1, 5, -7, 'abc', [], 3.2, 8]) == [1, 5, -7, 8]
assert filter_integers([1, 2]) == [1, 2]
assert filter_integers([1, 2, '3', '5', [], 9]) == [1, 2, 9]
assert filter_integers([1, 2, '3', '5', 'a', 'b', [], 9]) == [1, 2, 9]
assert filter_integers([1, 2, '3', '5', 'a', 'b', [], 9, None]) == [1, 2, 9]
assert filter_integers([1, 2, 3, 'A', 'B', 4, None]) == [1, 2, 3, 4]
assert filter_integers([-10, 1, -2, 3, 1, 4, 5]) == [-10, 1, -2, 3, 1, 4, 5]
assert filter_integers([1, 2, 3, 'a', 'b', 4, None]) == [1, 2, 3, 4]
assert filter_integers([1, 2, 34, 23, '23', '34', '12']) == [1, 2, 34, 23]
assert filter_integers([2, 3, 4, -1, -2, 'a', 'b', 3.14, 0.987]) == [2, 3, 4, -1, -2]
assert filter_integers([1, 1.2, 3, 4, '1', '2', 'a', 's', 5, 6]) == [1, 3, 4, 5, 6]
assert filter_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
assert filter_integers([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == [-9, -8, -7, -6, -5, -4, -3, -2, -1, 0]
assert filter_integers([1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0]) == []
assert filter_integers([1, 2, '1', '2']) == [1, 2]
assert filter_integers([0.1, 'a', 'b']) == []
assert filter_integers([0.1, 1.2, 2, 3]) == [2, 3]
assert filter_integers([1, '0', 'a', {}]) == [1]
assert filter_integers([0.0]) == []
assert filter_integers([1, 1, 1]) == [1, 1, 1]
assert filter_integers([3, 2, 1]) == [3, 2, 1]
assert filter_integers([3, 2, 1, 'text']) == [3, 2, 1]
assert filter_integers([-1, 0, 1, -2, 3, 2, 1]) == [-1, 0, 1, -2, 3, 2, 1]
assert filter_integers([0, 1, 2, -1, -2, 3, -3]) == [0, 1, 2, -1, -2, 3, -3]
assert filter_integers([0, 1, '1', '2', '-1', -2, 3, -3]) == [0, 1, -2, 3, -3]
assert filter_integers([0, 1, '1', '2', '-1', -2, 3, -3, 2.5]) == [0, 1, -2, 3, -3]
assert filter_integers([1, '2', 3, '4', 5]) == [1, 3, 5]
assert filter_integers([1, 'hello', 3, 4, 5]) == [1, 3, 4, 5]
assert filter_integers([1, 'hello', 2.3, [3, 4], 5]) == [1, 5]
assert filter_integers([0, {}, {0: 0}, None]) == [0]
