

def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
    return encode_cyclic(s)
assert "abc" == decode_cyclic(encode_cyclic("abc"))
assert "abcde" == decode_cyclic(encode_cyclic("abcde"))
assert "abcdefghijklmnopqrstuvwxyz" == decode_cyclic(encode_cyclic("abcdefghijklmnopqrstuvwxyz"))
assert "ABCDEFGHIJKLMNOPQRSTUVWXYZ" == decode_cyclic(encode_cyclic("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
assert "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" == decode_cyclic(encode_cyclic("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"))
assert decode_cyclic(encode_cyclic("asdfh")) == "asdfh"
assert decode_cyclic(encode_cyclic("1")) == "1"
assert decode_cyclic(encode_cyclic("123")) == "123"
assert decode_cyclic(encode_cyclic("12345")) == "12345"
assert decode_cyclic(encode_cyclic("123456")) == "123456"
assert decode_cyclic(encode_cyclic("1234567")) == "1234567"
assert decode_cyclic(encode_cyclic("abcdefghijklmnopqrstuvwxyz")) == "abcdefghijklmnopqrstuvwxyz"
assert decode_cyclic(encode_cyclic("hijklmn")) == "hijklmn"
assert decode_cyclic(encode_cyclic("")) == ""
assert decode_cyclic(encode_cyclic("a")) == "a"
assert decode_cyclic(encode_cyclic("ab")) == "ab"
assert encode_cyclic(decode_cyclic("qwertyuiopasdfghjkl")) == "qwertyuiopasdfghjkl"
assert "abcd" == decode_cyclic(encode_cyclic("abcd"))
assert "abcdef" == decode_cyclic(encode_cyclic("abcdef"))
assert decode_cyclic(encode_cyclic("123456789")) == "123456789"
assert decode_cyclic(encode_cyclic("12345678")) == "12345678"
assert decode_cyclic(encode_cyclic("1234")) == "1234"
assert decode_cyclic(encode_cyclic("12")) == "12"
assert decode_cyclic(encode_cyclic("abcd")) == "abcd"
assert decode_cyclic(encode_cyclic("abcdef")) == "abcdef"
assert decode_cyclic(encode_cyclic("abcdefghijkl")) == "abcdefghijkl"
assert decode_cyclic(encode_cyclic("abcdefgh")) == "abcdefgh"
assert decode_cyclic(encode_cyclic("veryencryptedstring")) == "veryencryptedstring"
assert decode_cyclic(encode_cyclic("aa")) == "aa"
assert decode_cyclic(encode_cyclic("aaa")) == "aaa"
assert decode_cyclic(encode_cyclic("abcdefg")) == "abcdefg"
assert decode_cyclic(encode_cyclic("abcdefghi")) == "abcdefghi"
assert decode_cyclic(encode_cyclic("abbcdefghi")) == "abbcdefghi"
assert decode_cyclic(encode_cyclic("abbccdefghi")) == "abbccdefghi"
assert decode_cyclic(encode_cyclic("abbcccdefghi")) == "abbcccdefghi"
assert decode_cyclic(encode_cyclic("abcdefghij")) == "abcdefghij"
assert decode_cyclic(encode_cyclic("abcdefghijk")) == "abcdefghijk"
assert decode_cyclic(encode_cyclic("abcdefghijklm")) == "abcdefghijklm"
assert decode_cyclic(encode_cyclic("abcdefghijklmn")) == "abcdefghijklmn"
assert decode_cyclic(encode_cyclic("abcdefghijklmno")) == "abcdefghijklmno"
assert decode_cyclic(encode_cyclic("1234567890")) == "1234567890"
assert decode_cyclic(encode_cyclic("12345678901")) == "12345678901"
assert decode_cyclic(encode_cyclic("123456789012")) == "123456789012"
assert decode_cyclic(encode_cyclic("1234567890123")) == "1234567890123"
assert decode_cyclic(encode_cyclic(" ")) == " "
assert decode_cyclic(encode_cyclic("AAABBBCCC")) == "AAABBBCCC"
assert decode_cyclic(encode_cyclic("ABCABCABC")) == "ABCABCABC"
assert decode_cyclic("IKBE") == "BIKE"
assert decode_cyclic(encode_cyclic("World")) == "World"
assert decode_cyclic(encode_cyclic("abc")) == "abc"
assert decode_cyclic(encode_cyclic("abcx")) == "abcx"
assert decode_cyclic(encode_cyclic("Hello World")) == "Hello World"
assert decode_cyclic(encode_cyclic("Hello")) == "Hello"
assert decode_cyclic(encode_cyclic("abcde")) == "abcde"
assert decode_cyclic(encode_cyclic("de")) == "de"
assert decode_cyclic(encode_cyclic("d")) == "d"
assert decode_cyclic(encode_cyclic("abbdefg")) == "abbdefg"
assert decode_cyclic(encode_cyclic("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz")) == "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
assert decode_cyclic(encode_cyclic("0123456789")) == "0123456789"
assert decode_cyclic(encode_cyclic("aaabbbccc")) == "aaabbbccc"
assert decode_cyclic(encode_cyclic("666")) == "666"
assert decode_cyclic(encode_cyclic("0")) == "0"
assert decode_cyclic(encode_cyclic("Do the students want to learn Python?")) == "Do the students want to learn Python?"
assert decode_cyclic(encode_cyclic("The")) == "The"
assert decode_cyclic(encode_cyclic("chillout")) == "chillout"
assert decode_cyclic(encode_cyclic("hello")) == "hello"
assert decode_cyclic(encode_cyclic("hell")) == "hell"
assert decode_cyclic(encode_cyclic("hello world")) == "hello world"
assert decode_cyclic(encode_cyclic("lala")) == "lala"
assert decode_cyclic(encode_cyclic("ala")) == "ala"
assert decode_cyclic(encode_cyclic("asd")) == "asd"
assert decode_cyclic(encode_cyclic("asdf")) == "asdf"
assert decode_cyclic(encode_cyclic("A good man is hard to find.")) == "A good man is hard to find."
assert decode_cyclic(encode_cyclic("abcd efgh ijk lm")) == "abcd efgh ijk lm"
assert decode_cyclic(encode_cyclic("1 2 3 4 5 6 7 8 9 0")) == "1 2 3 4 5 6 7 8 9 0"
assert encode_cyclic(decode_cyclic("pbuu")) == "pbuu"
assert encode_cyclic(decode_cyclic("rof")) == "rof"
assert encode_cyclic(decode_cyclic("o")) == "o"
assert encode_cyclic(decode_cyclic("uvgfer")) == "uvgfer"
assert encode_cyclic(decode_cyclic("aabccb")) == "aabccb"
assert encode_cyclic(decode_cyclic("abcdefghijkl")) == "abcdefghijkl"
assert decode_cyclic(encode_cyclic("asdasd")) == "asdasd"
assert decode_cyclic(encode_cyclic("qwertyuiop")) == "qwertyuiop"
assert decode_cyclic(encode_cyclic("asdfghjklzxcvbnm")) == "asdfghjklzxcvbnm"
assert decode_cyclic(encode_cyclic("amxx123654")) == "amxx123654"
assert decode_cyclic(encode_cyclic("A")) == "A"
assert decode_cyclic(encode_cyclic("asd asd")) == "asd asd"
assert "i love you" == decode_cyclic(encode_cyclic("i love you"))
assert "the mysterious mr johnson" == decode_cyclic(encode_cyclic("the mysterious mr johnson"))
assert "i am a hacker" == decode_cyclic(encode_cyclic("i am a hacker"))
assert decode_cyclic(encode_cyclic("dab")) == "dab"
assert decode_cyclic(encode_cyclic("zyxwvu")) == "zyxwvu"
assert decode_cyclic(encode_cyclic("b")) == "b"
assert decode_cyclic(encode_cyclic("kot")) == "kot"
assert decode_cyclic(encode_cyclic("kitt")) == "kitt"
assert decode_cyclic(encode_cyclic("kotek")) == "kotek"
assert decode_cyclic(encode_cyclic("tomek")) == "tomek"
assert decode_cyclic(encode_cyclic("tomek kot")) == "tomek kot"
assert decode_cyclic(encode_cyclic("kot kotek")) == "kot kotek"
assert decode_cyclic(encode_cyclic("kotek kot")) == "kotek kot"
assert decode_cyclic(encode_cyclic("kot kotek kotek")) == "kot kotek kotek"
assert decode_cyclic(encode_cyclic("kotek kotek kot")) == "kotek kotek kot"
assert decode_cyclic(encode_cyclic("kot kotek kotek kot")) == "kot kotek kotek kot"
assert decode_cyclic(encode_cyclic("asdff")) == "asdff"
assert decode_cyclic(encode_cyclic("asdfff")) == "asdfff"
assert decode_cyclic(encode_cyclic("asdffff")) == "asdffff"
assert decode_cyclic(encode_cyclic("asdfffff")) == "asdfffff"
assert decode_cyclic(encode_cyclic("asdffffff")) == "asdffffff"
assert decode_cyclic(encode_cyclic("aaaaabbbbbcc")) == "aaaaabbbbbcc"
assert decode_cyclic(encode_cyclic("aaaaabbbbbccccc")) == "aaaaabbbbbccccc"
assert decode_cyclic(encode_cyclic("aaaaabbbbbcccccd")) == "aaaaabbbbbcccccd"
assert decode_cyclic(encode_cyclic("aaaaabbbbbcccccdd")) == "aaaaabbbbbcccccdd"
assert decode_cyclic(encode_cyclic("AAA")) == "AAA"
assert decode_cyclic(encode_cyclic("ABCDEFGH")) == "ABCDEFGH"
assert decode_cyclic(encode_cyclic("ABCDEFGHI")) == "ABCDEFGHI"
assert decode_cyclic(encode_cyclic("ABCDEFGHIJ")) == "ABCDEFGHIJ"
assert decode_cyclic(encode_cyclic("abcd efg")) == "abcd efg"
assert decode_cyclic(encode_cyclic("abcd efgh")) == "abcd efgh"
assert decode_cyclic(encode_cyclic("abcd efghi")) == "abcd efghi"
assert decode_cyclic(encode_cyclic("abcde fghi")) == "abcde fghi"
assert decode_cyclic(encode_cyclic("abcdef ghij")) == "abcdef ghij"
assert decode_cyclic(encode_cyclic("abcdef ghijk")) == "abcdef ghijk"
assert encode_cyclic(decode_cyclic("abcdefghijk")) == "abcdefghijk"
assert encode_cyclic(decode_cyclic("a")) == "a"
assert encode_cyclic(decode_cyclic("")) == ""
assert decode_cyclic(encode_cyclic("to bad input")) == "to bad input"
assert decode_cyclic(encode_cyclic("Abcd1234xyz")) == "Abcd1234xyz"
assert decode_cyclic(encode_cyclic("ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890")) == "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
assert decode_cyclic(encode_cyclic("aaaaaaa")) == "aaaaaaa"
assert decode_cyclic(encode_cyclic("aaaaaa")) == "aaaaaa"
assert decode_cyclic(encode_cyclic("aaaaa")) == "aaaaa"
assert decode_cyclic(encode_cyclic("aaaa")) == "aaaa"
assert encode_cyclic(decode_cyclic("123456789")) == "123456789"
assert decode_cyclic(encode_cyclic("aaabbcc")) == "aaabbcc"
assert decode_cyclic(encode_cyclic("aaabbccc")) == "aaabbccc"
assert decode_cyclic(encode_cyclic("aaabbcccc")) == "aaabbcccc"
assert decode_cyclic("bca") == "abc"
assert decode_cyclic("a") == "a"
assert decode_cyclic(encode_cyclic("python")) == "python"
assert decode_cyclic(encode_cyclic("abcdefghijklmnopqrstuvwxyz1234567890")) == "abcdefghijklmnopqrstuvwxyz1234567890"
assert decode_cyclic(encode_cyclic("WIKIWIKI")) == "WIKIWIKI"
assert decode_cyclic(encode_cyclic("WIKIWIKIWIKI")) == "WIKIWIKIWIKI"
assert decode_cyclic(encode_cyclic("WIKIWIKIWIKIWIKI")) == "WIKIWIKIWIKIWIKI"
assert encode_cyclic(decode_cyclic("abce")) == "abce"
assert encode_cyclic(decode_cyclic("abcefg")) == "abcefg"
assert encode_cyclic(decode_cyclic("abcefgh")) == "abcefgh"
assert decode_cyclic(encode_cyclic("Ala ma kota")) == "Ala ma kota"
assert decode_cyclic(encode_cyclic("Siema")) == "Siema"
assert decode_cyclic(encode_cyclic("abcdabcd")) == "abcdabcd"
assert decode_cyclic(encode_cyclic("aabbccddeeff")) == "aabbccddeeff"
assert decode_cyclic(encode_cyclic("!")) == "!"
assert decode_cyclic(encode_cyclic("a!")) == "a!"
assert decode_cyclic(encode_cyclic("!a")) == "!a"
assert decode_cyclic(encode_cyclic("!a!")) == "!a!"
assert decode_cyclic(encode_cyclic("!a!a")) == "!a!a"
assert decode_cyclic(encode_cyclic("!a!a!")) == "!a!a!"
assert decode_cyclic(encode_cyclic("!a!a!!a"))
assert decode_cyclic(encode_cyclic("ABCDEF")) == "ABCDEF"
assert decode_cyclic(encode_cyclic("ABCDEFG")) == "ABCDEFG"
assert decode_cyclic(encode_cyclic("ABCDEFGHIJKLMNOPQRSTUVWXYZ" * 2)) == "ABCDEFGHIJKLMNOPQRSTUVWXYZ" * 2
assert decode_cyclic(encode_cyclic("Secret Message")) == "Secret Message"
assert decode_cyclic(encode_cyclic("A-")) == "A-"
assert decode_cyclic(encode_cyclic("Secret Message!")) == "Secret Message!"
assert decode_cyclic(encode_cyclic("VeryVeryVerySecretMessage")) == "VeryVeryVerySecretMessage"
assert decode_cyclic(encode_cyclic("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789")) == "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
assert decode_cyclic(encode_cyclic("ABC")) == "ABC"
assert decode_cyclic(encode_cyclic("Python is an interesting language")) == "Python is an interesting language"
assert decode_cyclic(encode_cyclic("Python")) == "Python"
assert decode_cyclic(encode_cyclic("Java")) == "Java"
assert decode_cyclic(encode_cyclic("C++")) == "C++"
assert decode_cyclic(encode_cyclic("Decode")) == "Decode"
assert decode_cyclic(encode_cyclic("This is a long string. The only purpose of it is to check that the function works correctly for long strings.")) == "This is a long string. The only purpose of it is to check that the function works correctly for long strings."
assert decode_cyclic(encode_cyclic("my secret text")) == "my secret text"
assert decode_cyclic(encode_cyclic("azerty uiop")) == "azerty uiop"
assert decode_cyclic(encode_cyclic("lorem ipsum dolor sit amet")) == "lorem ipsum dolor sit amet"
assert decode_cyclic(encode_cyclic("TESTTESTT")) == "TESTTESTT"
assert decode_cyclic(encode_cyclic("TESTTEST")) == "TESTTEST"
