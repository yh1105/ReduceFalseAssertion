from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number + min_number) for x in numbers]
assert rescale_to_unit([-3, 0, 3]) == [0, 0.5, 1]
assert rescale_to_unit([-9, 0, 9]) == [0, 0.5, 1]
assert rescale_to_unit([-42, 0, 42]) == [0, 0.5, 1]
assert rescale_to_unit([-13, 0, 13]) == [0, 0.5, 1]
assert rescale_to_unit([-8, 0, 8]) == [0, 0.5, 1]
assert rescale_to_unit([-1, 0, 1]) == [0, 0.5, 1]
assert rescale_to_unit([-1, -1, 0, 0, 1, 1]) == [0, 0, 0.5, 0.5, 1, 1]
assert rescale_to_unit([-1., 1., 0.]) == [0.0, 1.0, 0.5]
assert list(rescale_to_unit([0, 5])) == [0, 1]
assert list(rescale_to_unit([1, 2, 3, 4, 5])) == [0, 0.25, 0.5, 0.75, 1]
assert list(rescale_to_unit([1, 2, 3, 4, 5, 6])) == [0, 0.2, 0.4, 0.6, 0.8, 1]
assert rescale_to_unit([-1.0, 2.0]) == [0.0, 1.0]
assert rescale_to_unit([-1.0, 1.0]) == [0.0, 1.0]
assert rescale_to_unit([-1.0, 0.0]) == [0.0, 1.0]
assert rescale_to_unit([0.0, 1.0, 2.0]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([-1.0, -0.5, 0.0, 0.5, 1.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert list(rescale_to_unit([1, 2, 3, 4, 5])) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([0, 1, 2, 3, 4, 5]) == [0, 0.2, 0.4, 0.6, 0.8, 1]
assert rescale_to_unit([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
assert rescale_to_unit([1,2,3,4,5]) == [0,0.25,0.5,0.75,1]
assert rescale_to_unit([-1, 1]) == [0, 1]
assert rescale_to_unit([2, 4, 6]) == [0, 0.5, 1]
assert set(rescale_to_unit([1, 2, 3, 4, 5])) == {0.0, 0.25, 0.5, 0.75, 1.0}
assert set(rescale_to_unit([100, 200, 300, 400])) == {0.0, 0.3333333333333333, 0.6666666666666666, 1.0}
assert rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]
assert rescale_to_unit([1, 2, 1]) == [0, 1, 0]
assert rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([3., 2., 1.]) == [1., 0.5, 0.]
assert rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0, 0.2, 0.4, 0.6, 0.8, 1]
assert rescale_to_unit([-0.5, 0, 0.5]) == [0, 0.5, 1]
assert [0, 0.5, 1] == rescale_to_unit([0, 0.5, 1])
assert [0, 0.25, 0.5, 0.75, 1] == rescale_to_unit([1, 2, 3, 4, 5])
assert [0, 0.5, 0.5, 0.5, 1] == rescale_to_unit([-1, 0, 0, 0, 1])
assert rescale_to_unit([1, 2]) == [0, 1]
assert rescale_to_unit([-5,5]) == [0,1]
assert rescale_to_unit([-10,10,0,0]) == [0,1,0.5,0.5]
assert rescale_to_unit([-10,10,10,10]) == [0,1,1,1]
assert rescale_to_unit([-10,10,-10,10]) == [0,1,0,1]
assert rescale_to_unit([-5, 0, 5]) == [0, 0.5, 1]
assert rescale_to_unit([2, 3, 2]) == [0, 1.0, 0]
assert rescale_to_unit([-1, -1, 1]) == [0, 0, 1]
assert rescale_to_unit([-2, -1, 0, 1, 2]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
assert rescale_to_unit([3, 2, 1]) == [1.0, 0.5, 0]
assert rescale_to_unit([2, 4, 6]) == [0, 0.5, 1.0]
assert rescale_to_unit([-4, 0, 4]) == [0, 0.5, 1.0]
assert rescale_to_unit([2, 1]) == [1, 0]
assert rescale_to_unit([0, 2]) == [0, 1]
assert rescale_to_unit([1, 3]) == [0, 1]
assert rescale_to_unit([1, -1]) == [1, 0]
assert rescale_to_unit([1, -1, -1]) == [1, 0, 0]
assert rescale_to_unit([0, 0.2, 0.4]) == [0, 0.5, 1]
assert rescale_to_unit([3, 2, 1]) == [1, 0.5, 0]
assert rescale_to_unit([-2, 0, 2]) == [0, 0.5, 1]
assert rescale_to_unit([0, -1, 1]) == [0.5, 0, 1]
assert rescale_to_unit([1.0, 9.0, 3.0]) == [0.0, 1.0, 0.25]
assert rescale_to_unit([1., 0.]) == [1., 0.]
assert rescale_to_unit([-1., 1.]) == [0., 1.]
assert rescale_to_unit([1., 2.]) == [0., 1.]
assert rescale_to_unit([-1., -2.]) == [1., 0.]
assert rescale_to_unit([-2., -1.]) == [0., 1.]
assert rescale_to_unit([-2., 2.]) == [0., 1.]
assert rescale_to_unit([-2., 3.]) == [0., 1.]
assert rescale_to_unit([1, 2, 3, 5]) == [0, 0.25, 0.5, 1]
assert rescale_to_unit([10, 20, 30]) == [0, 0.5, 1]
assert rescale_to_unit([100, 200, 300]) == [0, 0.5, 1]
assert rescale_to_unit([0, 200, 0]) == [0, 1, 0]
assert rescale_to_unit([0, 1, 2]) == [0, 0.5, 1]
assert rescale_to_unit([0, 2, 4]) == [0, 0.5, 1]
assert rescale_to_unit([-5, 0, 5, 10]) == [0, 0.3333333333333333, 0.6666666666666666, 1]
assert rescale_to_unit([0, 0, 1]) == [0, 0, 1]
assert rescale_to_unit([0, 1, -1]) == [0.5, 1, 0]
assert rescale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([1.0, 2.0, 1.0]) == [0.0, 1.0, 0.0]
assert rescale_to_unit([0.0, 2.0, 1.0]) == [0.0, 1.0, 0.5]
assert rescale_to_unit([0, 1, 2, 3, 4]) == [0, 0.25, 0.5, 0.75, 1]
assert rescale_to_unit([7.0, 5.0, 3.0]) == [1.0, 0.5, 0.0]
assert rescale_to_unit([-2.0, -1.0, 0.0]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([0, 1]) == [0, 1]
assert rescale_to_unit([0, 0, 0, 1, 1]) == [0.0, 0.0, 0.0, 1.0, 1.0]
assert rescale_to_unit([-5, 10]) == [0.0, 1.0]
assert rescale_to_unit([1.0, 2.0, 3.0]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([2, 3, 4]) == [0, 0.5, 1]
assert rescale_to_unit([-1, -2, -3]) == [1, 0.5, 0]
assert rescale_to_unit([5, 4, 3, 2, 1, 0]) == [1, 0.8, 0.6, 0.4, 0.2, 0]
assert rescale_to_unit([1, 4, 3, 4, 6, 1]) == [0, 0.6, 0.4, 0.6, 1, 0]
assert rescale_to_unit([0, -1, -2]) == [1, 0.5, 0]
assert rescale_to_unit([0, 1, -1, 0, 1]) == [0.5, 1.0, 0.0, 0.5, 1.0]
assert rescale_to_unit([0, 2, 4, 6, 8]) == [0.0, 0.25, 0.5, 0.75, 1.0]
assert rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
assert rescale_to_unit([2, 3, 3, 4, 6]) == [0, 0.25, 0.25, 0.5, 1]
assert rescale_to_unit([1, 2, 4]) == [0, 0.3333333333333333, 1]
assert rescale_to_unit([-1, -2, -4]) == [1, 0.6666666666666666, 0]
assert rescale_to_unit([0, 0, 1, 1]) == [0, 0, 1, 1]
assert rescale_to_unit([4.0, 2.0, 3.0]) == [1.0, 0.0, 0.5]
assert rescale_to_unit([-10.0, 0.0, 10.0]) == [0.0, 0.5, 1.0]
assert rescale_to_unit([0.0, 10.0]) == [0.0, 1.0]
assert rescale_to_unit([-10, 0, 10]) == [0, 0.5, 1]
assert rescale_to_unit([4, 5, 6]) == [0, 0.5, 1]
assert rescale_to_unit([6, 5, 4]) == [1, 0.5, 0]
