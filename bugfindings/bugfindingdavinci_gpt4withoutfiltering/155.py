
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
    return (even_count, odd_count)
assert even_odd_count(123) == (1, 2)
assert even_odd_count(12345) == (2, 3)
assert even_odd_count(0) == (1, 0)
assert even_odd_count(1) == (0, 1)
assert even_odd_count(122345) == (3, 3)
assert even_odd_count(123456) == (3, 3)
assert even_odd_count(1232) == (2, 2)
assert even_odd_count(101) == (1, 2)
assert even_odd_count(11111) == (0, 5)
assert even_odd_count(2326) == (3, 1)
assert even_odd_count(12213) == (2, 3)
assert even_odd_count(111111111) == (0, 9)
assert even_odd_count(12345678901234567890) == (10, 10)
assert even_odd_count(2666) == (4, 0)
assert even_odd_count(50) == (1, 1)
assert even_odd_count(4) == (1, 0)
assert even_odd_count(12341) == (2, 3)
assert even_odd_count(1234) == (2, 2)
assert even_odd_count(2468) == (4, 0)
assert even_odd_count(1245) == (2, 2)
assert even_odd_count(5) == (0, 1)
assert even_odd_count(10) == (1, 1)
assert even_odd_count(2) == (1, 0)
assert even_odd_count(3) == (0, 1)
assert even_odd_count(11) == (0, 2)
assert even_odd_count(22) == (2, 0)
assert even_odd_count(33) == (0, 2)
assert even_odd_count(44) == (2, 0)
assert even_odd_count(55) == (0, 2)
assert even_odd_count(99) == (0, 2)
assert even_odd_count(4567) == (2, 2)
assert even_odd_count(1234567890) == (5, 5)
assert even_odd_count(111) == (0, 3)
assert even_odd_count(555555) == (0, 6)
assert even_odd_count(123445) == (3, 3)
assert even_odd_count(15) == (0, 2)
assert even_odd_count(123456789) == (4, 5)
assert even_odd_count(123454321) == (4, 5)
assert even_odd_count(999999999) == (0, 9)
assert even_odd_count(1231) == (1, 3)
assert even_odd_count(1213) == (1, 3)
assert even_odd_count(312) == (1, 2)
assert even_odd_count(9) == (0, 1)
assert even_odd_count(100100100) == (6, 3)
assert even_odd_count(1234567890123) == (6, 7)
assert even_odd_count(10000) == (4, 1)
assert even_odd_count(101010101) == (4, 5)
assert even_odd_count(32343) == (2, 3)
assert even_odd_count(345) == (1, 2)
assert even_odd_count(1000) == (3, 1)
assert even_odd_count(9876543210) == (5, 5)
assert even_odd_count(321) == (1, 2)
assert even_odd_count(6589) == (2, 2)
assert even_odd_count(123123123) == (3, 6)
assert even_odd_count(22222) == (5, 0)
assert even_odd_count(7) == (0, 1)
assert even_odd_count(111111) == (0, 6)
assert even_odd_count(94444) == (4, 1)
assert even_odd_count(125) == (1, 2)
assert even_odd_count(11111111) == (0, 8)
assert even_odd_count(1111) == (0, 4)
assert even_odd_count(13579) == (0, 5)
assert even_odd_count(-2) == (1, 0)
assert even_odd_count(5020) == (3, 1)
assert even_odd_count(1567) == (1, 3)
assert even_odd_count(123456789) == (4,5)
assert even_odd_count(1230) == (2, 2)
assert even_odd_count(222) == (3, 0)
assert even_odd_count(1234567) == (3, 4)
assert even_odd_count(-103) == (1, 2)
assert even_odd_count(-0) == (1, 0)
assert even_odd_count(-1) == (0, 1)
assert even_odd_count(2301) == (2, 2)
assert even_odd_count(4) == (1, 0)  # 1 even, 0 odd
assert even_odd_count(8888) == (4, 0)  # 4 even, 0 odd
assert even_odd_count(99999) == (0, 5)  # 0 even, 5 odd
assert even_odd_count(1234567890) == (5, 5)  # 5 even, 5 odd
assert even_odd_count(42) == (2, 0)  # 2 even, 0 odd
assert even_odd_count(0) == (1, 0)  # 1 even, 0 odd
assert even_odd_count(11) == (0, 2)  # 0 even, 2 odd
assert even_odd_count(1111111111) == (0, 10)  # 0 even, 10 odd
assert even_odd_count(212345) == (3, 3)
assert even_odd_count(523) == (1, 2)
assert even_odd_count(99977) == (0, 5)
assert even_odd_count(99999) == (0, 5)
assert even_odd_count(2456) == (3, 1)
assert even_odd_count(2512) == (2, 2)
assert even_odd_count(321456) == (3, 3)
assert even_odd_count(21) == (1, 1)
assert even_odd_count(5231) == (1, 3)
assert even_odd_count(17) == (0, 2)
assert even_odd_count(7892) == (2, 2)
assert even_odd_count(87654) == (3, 2)
assert even_odd_count(121) == (1, 2)
assert even_odd_count(1221) == (2, 2)
assert even_odd_count(145) == (1, 2)
assert even_odd_count(24) == (2, 0)
assert even_odd_count(20) == (2, 0)
assert even_odd_count(234) == (2, 1)
assert even_odd_count(212) == (2, 1)
assert even_odd_count(12345678) == (4, 4)
