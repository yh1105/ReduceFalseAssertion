from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    return result
assert intersperse([1, 2, 3], 42) == [1, 42, 2, 42, 3]
assert intersperse([10], 5) == [10]
assert intersperse([10, 20], 5) == [10, 5, 20]
assert intersperse([10, 20, 30], 5) == [10, 5, 20, 5, 30]
assert intersperse([10, 20, 30, 40], 5) == [10, 5, 20, 5, 30, 5, 40]
assert intersperse([5], 7) == [5]
assert intersperse([5,10,15], 7) == [5,7,10,7,15]
assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]
assert intersperse([1, 2, 3, 4, 5], -1) == [1, -1, 2, -1, 3, -1, 4, -1, 5]
assert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]
assert intersperse([1, 2, 3, 4], -1) == [1, -1, 2, -1, 3, -1, 4]
assert intersperse([1, 2, 3, 4, 5], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5]
assert intersperse([1, 2, 3, 4, 5, 6], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6]
assert intersperse([1, 2, 3, 4, 5, 6, 7], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7]
assert intersperse([1, 2, 3, 4, 5, 6, 7, 8], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8]
assert intersperse([1, 2, 3], 5) == [1, 5, 2, 5, 3]
assert intersperse([1, 2, 3, 4, 5], 5) == [1, 5, 2, 5, 3, 5, 4, 5, 5]
assert intersperse([0], 10) == [0]
assert intersperse([1, 2, 3], 10) == [1, 10, 2, 10, 3]
assert intersperse([1, 2, 3, 4, 5], 10) == [1, 10, 2, 10, 3, 10, 4, 10, 5]
assert intersperse([1,2,3,4,5], 9) == [1,9,2,9,3,9,4,9,5]
assert intersperse([1,2,3,4,5], -1) == [1,-1,2,-1,3,-1,4,-1,5]
assert intersperse([1,2,3,4,5], 1) == [1,1,2,1,3,1,4,1,5]
assert intersperse([1,2,3,4,5], 7) == [1,7,2,7,3,7,4,7,5]
assert intersperse([1,2,3,4,5], 10) == [1,10,2,10,3,10,4,10,5]
assert intersperse([1, 2, 3], 'x') == [1, 'x', 2, 'x', 3]
assert intersperse([1, 2, 3, 4], 9) == [1, 9, 2, 9, 3, 9, 4]
assert intersperse([1, 2, 3, 4, 5], 9) == [1, 9, 2, 9, 3, 9, 4, 9, 5]
assert intersperse([1, 2, 3, 4, 5, 6], 9) == [1, 9, 2, 9, 3, 9, 4, 9, 5, 9, 6]
assert intersperse([0], 0) == [0]
assert intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1) == [1, -1, 2, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, 8, -1, 9, -1, 10]
assert intersperse([1], 0) == [1]
assert intersperse([1, 2], 0) == [1, 0, 2]
assert intersperse([1, 2, 3], 'test') == [1, 'test', 2, 'test', 3]
assert intersperse([1, 2, 3, 4], 'test') == [1, 'test', 2, 'test', 3, 'test', 4]
assert intersperse([1, 2, 3, 4, 5], 'test') == [1, 'test', 2, 'test', 3, 'test', 4, 'test', 5]
assert intersperse([1], 100) == [1]
assert intersperse([1, 2], 100) == [1, 100, 2]
assert intersperse([1, 2, 3], 100) == [1, 100, 2, 100, 3]
assert intersperse([1, 2, 3, 4], 10) == [1, 10, 2, 10, 3, 10, 4]
assert intersperse([11], 0) == [11]
assert intersperse([1, 3, 5, 7], 1) == [1, 1, 3, 1, 5, 1, 7]
assert intersperse([1, 2, 3], -1) == [1, -1, 2, -1, 3]
assert intersperse([1], 1) == [1]
assert intersperse([1, 2], 1) == [1, 1, 2]
assert intersperse([1, 2, 3], 1) == [1, 1, 2, 1, 3]
assert intersperse([1, 2, 3, 4], 1) == [1, 1, 2, 1, 3, 1, 4]
assert intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 1, 3, 1, 4, 1, 5]
assert intersperse([0, 0, 0], 1) == [0, 1, 0, 1, 0]
assert intersperse([1, 2, 3, 4, 5], 6) == [1, 6, 2, 6, 3, 6, 4, 6, 5]
assert intersperse([1,2,3,4,5], 2) == [1,2,2,2,3,2,4,2,5]
assert intersperse([1,2,3,4,5], 3) == [1,3,2,3,3,3,4,3,5]
assert intersperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 5, 4]
assert intersperse([2, 3, 4, 5], 1) == [2, 1, 3, 1, 4, 1, 5]
assert intersperse([1], -1) == [1]
assert intersperse([4, 7, 3, 2, 1], -1) == [4, -1, 7, -1, 3, -1, 2, -1, 1]
assert intersperse([2, 3, 4, 5, 6], -3) == [2, -3, 3, -3, 4, -3, 5, -3, 6]
assert intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [1, 10, 2, 10, 3, 10, 4, 10, 5, 10, 6, 10, 7, 10, 8, 10, 9, 10, 10]
assert intersperse([3, 2, 1], -1) == [3, -1, 2, -1, 1]
assert intersperse([1], 5) == [1]
assert intersperse([1, 2], 5) == [1, 5, 2]
assert intersperse([1,2,3,4,5], 0) == [1,0,2,0,3,0,4,0,5]
assert intersperse([7, 2, 5, 9], 10) == [7, 10, 2, 10, 5, 10, 9]
assert intersperse([7, 2, 5, 9], 0) == [7, 0, 2, 0, 5, 0, 9]
assert intersperse([7, 2, 5, 9], 1) == [7, 1, 2, 1, 5, 1, 9]
assert intersperse([10, 20, 30, 40], ',') == [10, ',', 20, ',', 30, ',', 40]
assert intersperse([4, 5, 6], -1) == [4, -1, 5, -1, 6]
assert intersperse([4, 8, 15, 16, 23, 42], 99) == [4, 99, 8, 99, 15, 99, 16, 99, 23, 99, 42]
assert intersperse([2, 1, 3, 0], 1) == [2, 1, 1, 1, 3, 1, 0]
assert intersperse([1, 2, 3, 4], 2) == [1, 2, 2, 2, 3, 2, 4]
assert intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 2, 3, 2, 4, 2, 5]
assert intersperse([1, 2, 3, 4, 5, 6], 2) == [1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6]
assert intersperse([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7]
assert intersperse([1, 2, 3, 4, 5, 6, 7, 8], 2) == [1, 2, 2, 2, 3, 2, 4, 2, 5, 2, 6, 2, 7, 2, 8]
assert intersperse([0, 1, 2, 3, 4, 5], -3) == [0, -3, 1, -3, 2, -3, 3, -3, 4, -3, 5]
assert intersperse([0], 1) == [0]
assert intersperse([1, 1, 1], 0) == [1, 0, 1, 0, 1]
assert intersperse([1,2,3], 0) == [1,0,2,0,3]
assert intersperse([1,2,3,4,5],-1) == [1,-1,2,-1,3,-1,4,-1,5]
assert intersperse([1,2,3,4,5],9) == [1,9,2,9,3,9,4,9,5]
assert intersperse([1,2,3], 5) == [1,5,2,5,3]
assert intersperse([0,0,0], 7) == [0,7,0,7,0]
assert intersperse([-1, 0, 1], 0) == [-1, 0, 0, 0, 1]
assert intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10]
assert intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -2) == [1, -2, 2, -2, 3, -2, 4, -2, 5, -2, 6, -2, 7, -2, 8, -2, 9, -2, 10]
assert intersperse([1,2,3], -1) == [1,-1,2,-1,3]
assert intersperse([1,2,3,4], -1) == [1,-1,2,-1,3,-1,4]
assert intersperse([10, 20, 30], 1) == [10, 1, 20, 1, 30]
assert intersperse([3, 2, 1], 100) == [3, 100, 2, 100, 1]
assert intersperse([1, 2, 3, 4, 5], -10) == [1, -10, 2, -10, 3, -10, 4, -10, 5]
assert intersperse([10, 11, 12, 13, 14], 5) == [10, 5, 11, 5, 12, 5, 13, 5, 14]
assert intersperse([11, 22, 33, 44, 55], 0) == [11, 0, 22, 0, 33, 0, 44, 0, 55]
assert intersperse([1], -10) == [1]
assert intersperse([1, 2], -10) == [1, -10, 2]
assert intersperse([3, 4, 5, 6, 7], 13) == [3, 13, 4, 13, 5, 13, 6, 13, 7]
assert intersperse([1], 'a') == [1]
assert intersperse([1, 2], 'a') == [1, 'a', 2]
assert intersperse([1, 2, 3], 'a') == [1, 'a', 2, 'a', 3]
assert intersperse([1, 2, 3, 4], 'a') == [1, 'a', 2, 'a', 3, 'a', 4]
assert intersperse([1, 2, 3, 4, 5], 'a') == [1, 'a', 2, 'a', 3, 'a', 4, 'a', 5]
assert intersperse([6, 5, 4, 3, 2, 1], -1) == [6, -1, 5, -1, 4, -1, 3, -1, 2, -1, 1]
assert intersperse([3, 3, 3, 3, 3], 9) == [3, 9, 3, 9, 3, 9, 3, 9, 3]
assert intersperse([1,2,3], 1) == [1,1,2,1,3]
assert intersperse([5,5,5], 10) == [5,10,5,10,5]
assert intersperse([2, 3, 5, 7, 11], 0) == [2, 0, 3, 0, 5, 0, 7, 0, 11]
assert intersperse([2, 3, 5, 7, 11], -3) == [2, -3, 3, -3, 5, -3, 7, -3, 11]
assert intersperse([2], 3) == [2]
