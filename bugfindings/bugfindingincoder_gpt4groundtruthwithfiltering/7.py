from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
    return [x for x in strings if x in substring]
assert filter_by_substring(["a", "b"], "a") == ["a"]
assert filter_by_substring(["a"], "a") == ["a"]
assert filter_by_substring(["a"], "b") == []
assert filter_by_substring(['abc', 'def', 'ghi'], 'def') == ['def']
assert filter_by_substring(['abc', 'def', 'ghi'], 'ghi') == ['ghi']
assert filter_by_substring(['a', 'bb', 'c', 'ab'], 'bc') == []
assert filter_by_substring(['a', 'bb', 'c', 'ab'], 'xyz') == []
assert filter_by_substring(["1", "2", "3"], "1") == ["1"]
assert filter_by_substring([], "1") == []
assert filter_by_substring([], "2") == []
assert filter_by_substring([], "3") == []
assert filter_by_substring([], "4") == []
assert filter_by_substring([], "5") == []
assert filter_by_substring([], "6") == []
assert filter_by_substring([], "7") == []
assert filter_by_substring(['abcd', 'efgh', 'ijkl','mnop', 'qrs', 'tuv', 'wxyz'], 'fgh') == ['efgh']
assert filter_by_substring(["hello", "world", "helllo", "foo", "bar"], "world") == ["world"]
assert filter_by_substring(["hello", "world", "helllo", "foo", "bar"], "hello") == ["hello"]
assert filter_by_substring(["hello", "world", "helllo", "foo", "bar"], "aa") == []
assert filter_by_substring(['1', '2', '3', '4', '5'], '5') == ['5']
assert filter_by_substring(['1', '2', '3', '4', '5'], '6') == []
assert filter_by_substring(['aa', 'bbb', 'ccc'], 'bb') == ['bbb']
assert filter_by_substring(['aa', 'bbb', 'ccc'], 'c') == ['ccc']
assert filter_by_substring(['aa', 'bbb', 'ccc'], 'd') == []
assert filter_by_substring(["dog", "cat", "cow", "dog"], "cow") == ["cow"]
assert filter_by_substring(["dog", "cat", "cow", "dog"], "x") == []
assert filter_by_substring(["dog", "cat", "cow", "dog"], "cows") == []
assert filter_by_substring(['hello', 'world'], 'world') == ['world']
assert filter_by_substring(['hello', 'world'], 'helllo') == []
assert filter_by_substring(['p','pp','ppp'], 'pp') == ['pp','ppp']
assert filter_by_substring(['p','pp','ppp'], 'ppp') == ['ppp']
assert filter_by_substring(['p','pp','ppp'], 'pppp') == []
assert filter_by_substring(["abc", "def", "ghi"], "def") == ["def"]
assert filter_by_substring(["abc", "def", "ghi"], "ghi") == ["ghi"]
assert filter_by_substring(["string1", "string2", "string3"], "string3") == ["string3"]
assert filter_by_substring(["abc", "def", "ghi", "abc"], substring="def") == ["def"]
assert filter_by_substring(["abc", "def", "ghi", "abc"], substring="g") == ["ghi"]
assert filter_by_substring(['abcde'], 'abc') == ['abcde']
assert filter_by_substring(["a", "b", "c", "d"], "f") == []
assert filter_by_substring(["a", "b", "c", "d"], "g") == []
assert filter_by_substring(["a", "b", "c", "d"], "h") == []
assert filter_by_substring(['aa', 'aab', 'aac', 'bb', 'bc'], 'a') == ['aa', 'aab', 'aac']
assert filter_by_substring(['hello', 'goodbye', 'hi'], 'goodbye') == ['goodbye']
assert filter_by_substring(['hello', 'goodbye', 'hi'], 'hi') == ['hi']
assert filter_by_substring(['abc', 'abd', 'acd', 'bcd'], 'b') == ['abc', 'abd', 'bcd']
assert filter_by_substring(["java", "python", "javascript"], "python") == ["python"]
assert filter_by_substring(["javascript", "java", "python"], "python") == ["python"]
assert filter_by_substring(["javascript", "python", "ruby"], "python") == ["python"]
assert filter_by_substring(["hello", "hi", "greetings", "hi there"], "bye") == []
assert filter_by_substring(["hello", "hi", "greetings", "hi there"], "there") == ["hi there"]
assert filter_by_substring(["python", "pyhton", "java", "javascript"], "java") == ["java", "javascript"]
assert filter_by_substring(["python", "pyhton", "java", "javascript"], "javascript") == ["javascript"]
assert filter_by_substring(['abc', 'def', 'ghi', 'jkl'], 'ghi') == ['ghi']
assert filter_by_substring(['abc', 'def', 'ghi'], 'jkl') == []
assert filter_by_substring(["one", "two", "three"], "one") == ["one"]
assert filter_by_substring(["one", "two", "three"], "four") == []
assert filter_by_substring(["one", "two", "three"], "a") == []
assert filter_by_substring(["one", "two", "three"], "three") == ["three"]
assert filter_by_substring(['foo', 'bar', 'foobar', 'barfoo'], 'baz') == []
assert filter_by_substring(["Hello", "World"], "World") == ["World"]
assert filter_by_substring(["test1", "test2", "test3"], "tests") == []
assert filter_by_substring(["test1", "test2", "test3"], "tes") == ["test1", "test2", "test3"]
assert filter_by_substring(["a", "b", "c"], "d") ==  []
assert filter_by_substring(['a', 'ab', 'abc'], 'ac') == []
assert filter_by_substring(['a', 'ab', 'abc'], 'x') == []
assert filter_by_substring(["Python", "Pythonista", "Java", "Node"], 'Node') == ["Node"]
assert filter_by_substring(["Python", "Pythonista", "Java", "Node"], 'Java') == ["Java"]
assert filter_by_substring(['a', 'xyz', 'ab'], 'abc') == []
assert filter_by_substring(['dog', 'cat', 'cat'], 'elephant') == []
assert filter_by_substring(["Hello", "World"], "oob") == []
assert filter_by_substring(["a", "abc", "de", "f"], "w") == []
assert filter_by_substring(["dog", "cat", "dog", "dog"], "cat") == ["cat"]
assert filter_by_substring(["dog", "cat", "dog", "dog"], "chicken") == []
assert filter_by_substring(['hello', 'world'], 'hell') == ['hello']
assert filter_by_substring(['a', 'b', 'c', 'd'], 'z') == []
assert filter_by_substring(['abc', 'abd', 'bcd', 'abcd'], 'ac') == []
assert filter_by_substring(["abc", "abd", "acd"], "ab") == ["abc", "abd"]
assert filter_by_substring(['a', 'b', 'c', 'd'], 'e') == []
assert filter_by_substring(["abc", "abcdef", "abcdefghijk"], "defdef") == []
assert filter_by_substring(['hello', 'world'], 'oworld') == []
