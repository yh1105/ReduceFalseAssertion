from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
    return [x for x in strings if x.endswith(prefix)]
assert 	filter_by_prefix(["ac", "acd"], "ab") == []
assert 	filter_by_prefix(["ab", "ac"], "ab") == ['ab']
assert 	filter_by_prefix(["abc", "abcd"], "def") == []
assert 	filter_by_prefix(["abc", "abcd"], "") == ['abc', 'abcd']
assert 	filter_by_prefix(['ac', 'ca', 'bd', 'aa', 'ad', 'ba', 'bc', 'cc'], 'ad') == ['ad']
assert 	filter_by_prefix(['ac', 'ca', 'bd', 'aa', 'ad', 'ba', 'bc', 'cc'], '') == ['ac', 'ca', 'bd', 'aa', 'ad', 'ba', 'bc', 'cc']
assert 	filter_by_prefix(['ac', 'ca', 'bd', 'aa', 'ad', 'ba', 'bc', 'cc'], 'z') == []
assert 	filter_by_prefix(['ac', 'ca', 'bd', 'aa', 'ad', 'ba', 'bc', 'cc'], 'ca') == ['ca']
assert 	filter_by_prefix(['abc', 'abd', 'abf', 'abg'], '') == ['abc', 'abd', 'abf', 'abg']
assert 	filter_by_prefix(['abc', 'abd', 'abf', 'abg'], 'aa') == []
assert filter_by_prefix(["abcd", "abef", "abc"], "xyz") == []
assert filter_by_prefix(["abcd", "abef", "abc"], "xy") == []
assert filter_by_prefix(["abcd", "abef", "abc"], "xyzxyz") == []
assert filter_by_prefix(["dog", "cat", "bird"], "doge") == []
assert filter_by_prefix(["dog", "cat", "bird"], "") == ["dog", "cat", "bird"]
assert 	filter_by_prefix(["apple", "banana", "cat"], "car") == []
assert 	filter_by_prefix(["apple", "banana", "cat"], "") == ["apple", "banana", "cat"]
assert 	filter_by_prefix(['hello', 'helloworld', 'goodbye', 'goodbye world'], 'g') == ['goodbye', 'goodbye world']
assert 	filter_by_prefix(['hello', 'helloworld', 'goodbye', 'goodbye world'], 'good') == ['goodbye', 'goodbye world']
assert 	filter_by_prefix(['hello', 'helloworld', 'goodbye', 'goodbye world'], 'w') == []
assert 	filter_by_prefix(['hello', 'helloworld', 'goodbye', 'goodbye world'], '') == ['hello', 'helloworld', 'goodbye', 'goodbye world']
assert filter_by_prefix(["panda", "panda", "dog", "cat", "cat", "bird"], "p") == ["panda", "panda"]
assert filter_by_prefix(["panda", "panda", "dog", "cat", "bird"], "pand") == ["panda", "panda"]
assert filter_by_prefix(["panda", "panda", "dog", "cat", "bird"], "p") == ["panda", "panda"]
assert filter_by_prefix(["panda", "panda", "dog", "cat", "bird"], "") == ["panda", "panda", "dog", "cat", "bird"]
assert 	filter_by_prefix(["apple", "banana", "cherry"], "c") == ["cherry"]
assert 	filter_by_prefix(["apple", "banana", "cherry"], "") == ["apple", "banana", "cherry"]
assert 	filter_by_prefix(["hello", "world"], "") == ["hello", "world"]
assert 	filter_by_prefix(["hello", "world"], "h") == ["hello"]
assert 	filter_by_prefix(["hello", "world"], "world") == ["world"]
assert 	filter_by_prefix(["hello", "world"], "worlds") == []
assert filter_by_prefix(['hello', 'world', 'heaven'], 'he') == ['hello', 'heaven']
assert filter_by_prefix(['hello', 'world', 'heaven'], 'hello') == ['hello']
assert filter_by_prefix(['hello', 'world', 'heaven'], 'hi') == []
assert filter_by_prefix(['hello', 'world', 'heaven'], '') == ['hello', 'world', 'heaven']
assert filter_by_prefix(["a", "b", "b", "c", "d"], "x") == []
assert filter_by_prefix(["b", "b", "b"], "b") == ["b", "b", "b"]
assert 	filter_by_prefix(['a', 'b', 'c'], 'a') == ['a']
assert 	filter_by_prefix(['a', 'b', 'c'], 'x') == []
assert 	filter_by_prefix(['flow', 'flight', 'fog'], 'fl') == ['flow', 'flight']
assert 	filter_by_prefix(['flow', 'flight', 'fog'], '') == ['flow', 'flight', 'fog']
assert 	filter_by_prefix(['flower', 'flow', 'flight', 'fog'], 'fog') == ['fog']
assert 	filter_by_prefix(["abc", "def", "ghi", "xyz", "opq", "uvw"], "def") == ['def']
assert 	filter_by_prefix(["abc", "def", "ghi", "xyz", "opq", "uvw"], "abcd") == []
assert 	filter_by_prefix(["abc", "def", "ghi", "xyz", "opq", "uvw"], "q") == []
assert 	filter_by_prefix(["abc", "def", "ghi", "xyz", "opq", "uvw"], "qw") == []
assert 	filter_by_prefix(["abc", "def", "ghi", "xyz", "opq", "uvw"], "a") == ['abc']
assert filter_by_prefix(["abc", "123", "xyz"], "123") == ['123']
assert filter_by_prefix(["abc", "123", "xyz"], "abc") == ['abc']
assert 	filter_by_prefix(["apple", "cherry", "pear"], "app") == ["apple"]
assert 	filter_by_prefix(["apple", "cherry", "pear"], "c") == ["cherry"]
assert 	filter_by_prefix(["apple", "cherry", "pear"], "") == ["apple", "cherry", "pear"]
assert 	filter_by_prefix(["apple", "cherry", "pear"], "z") == []
assert 	filter_by_prefix(["apple", "cherry", "pear"], "apple") == ["apple"]
assert 	filter_by_prefix(["apple", "cherry", "pear"], "zebra") == []
assert 	filter_by_prefix(["apple", "cherry", "pear"], "pz") == []
assert 	filter_by_prefix(['asdf', 'asdf', 'asdfsfs', 'qwer', 'zxcv'], 'a') == ['asdf', 'asdf', 'asdfsfs']
assert 	filter_by_prefix(['asdf', 'asdf', 'asdfsfs', 'qwer', 'zxcv'], 'qwer') == ['qwer']
assert 	filter_by_prefix(['asdf', 'asdf', 'asdfsfs', 'qwer', 'zxcv'], '') == ['asdf', 'asdf', 'asdfsfs', 'qwer', 'zxcv']
assert 	filter_by_prefix(['asdf', 'asdf', 'asdfsfs', 'qwer', 'zxcv'], 'zxcv') == ['zxcv']
assert filter_by_prefix(["a","b","b"], "a") == ["a"]
assert filter_by_prefix(["a","a","a","b"], "a") == ["a","a","a"]
assert filter_by_prefix(["a","a","a","b"], "b") == ["b"]
assert filter_by_prefix(["a","a","a","b"], "c") == []
assert filter_by_prefix(["a","b","b"], "") == ["a","b","b"]
assert filter_by_prefix(["b","a","b"], "c") == []
assert filter_by_prefix(["aa","a","b","b"], "") == ["aa","a","b","b"]
assert filter_by_prefix(["aa","a","b","b"], "b") == ["b","b"]
assert filter_by_prefix(["aa","a","b","b"], "c") == []
